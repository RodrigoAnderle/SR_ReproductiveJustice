coluna <- input$coluna_filtro
if (filtro == "") {
data_mod
} else {
data_mod %>% filter(get(coluna) %like% filtro)
}
})
# Renderizar a tabela interativa
output$tabela <- renderDataTable({
dados_filtrados()
})
}
# Executa Shinv
# Executa Shinv
shinyApp(ui = ui, server = server)
# Carregar os pacotes necessários
library(shiny)
library(DT) # Para tabelas interativas
library(dplyr)
# Preparar os dados (use seu código para data_mod aqui)
data_mod <- data %>%
select(SR, LCS, TC, AU, TI, CT, PY, AU1_CO) %>%
rename(
Referencia = SR,
`Co-Citas` = LCS,
Citas = TC,
Autor = AU,
Título = TI,
Categorías = CT,
Año = PY,
País = AU1_CO
)
# Definir a interface do usuário
ui <- fluidPage(
titlePanel("Visualización de Datos - Material Suplementario"),
sidebarLayout(
sidebarPanel(
h3("Opciones"),
textInput("buscar", "Buscar en la tabla:", value = ""),
selectInput("columna_filtro", "Filtrar por columna:",
choices = colnames(data_mod), selected = "Referencia"),
textInput("valor_filtro", "Ingrese el valor para filtrar:", value = "")
),
mainPanel(
h3("Tabla Interactiva"),
dataTableOutput("tabla")
)
)
)
# Definir o servidor
server <- function(input, output) {
# Filtrar os dados com base nas entradas do usuário
datos_filtrados <- reactive({
filtro <- input$valor_filtro
columna <- input$columna_filtro
if (filtro == "") {
data_mod
} else {
data_mod %>% filter(get(columna) %like% filtro)
}
})
# Renderizar a tabela interativa
output$tabla <- renderDataTable({
datos_filtrados()
})
}
# Executar o aplicativo Shiny
shinyApp(ui = ui, server = server)
# Carregar os pacotes necessários
library(shiny)
library(DT) # Para tabelas interativas
library(dplyr)
# Preparar os dados (use seu código para data_mod aqui)
data_mod <- data %>%
select(SR, LCS, TC, AU, TI, CT, PY, AU1_CO) %>%
rename(
Referencia = SR,
`Co-Citas` = LCS,
Citas = TC,
Autor = AU,
Título = TI,
Categorías = CT,
Año = PY,
País = AU1_CO
)
# Definir a interface do usuário
ui <- fluidPage(
titlePanel("Visualización de Datos - Material Suplementario"),
sidebarLayout(
sidebarPanel(
h3("Filtros"),
selectInput("categoria", "Seleccionar Categoría:",
choices = unique(data_mod$Categorías),
selected = unique(data_mod$Categorías)[1]),
selectInput("pais", "Seleccionar País:",
choices = unique(data_mod$País),
selected = unique(data_mod$País)[1]),
sliderInput("ano", "Seleccionar intervalo de años:",
min = min(data_mod$Año, na.rm = TRUE),
max = max(data_mod$Año, na.rm = TRUE),
value = c(min(data_mod$Año, na.rm = TRUE), max(data_mod$Año, na.rm = TRUE))),
sliderInput("citas", "Seleccionar intervalo de Citas:",
min = min(data_mod$Citas, na.rm = TRUE),
max = max(data_mod$Citas, na.rm = TRUE),
value = c(min(data_mod$Citas, na.rm = TRUE), max(data_mod$Citas, na.rm = TRUE))),
sliderInput("co_citas", "Seleccionar intervalo de Co-Citas:",
min = min(data_mod$`Co-Citas`, na.rm = TRUE),
max = max(data_mod$`Co-Citas`, na.rm = TRUE),
value = c(min(data_mod$`Co-Citas`, na.rm = TRUE), max(data_mod$`Co-Citas`, na.rm = TRUE)))
),
mainPanel(
h3("Tabla Interactiva"),
dataTableOutput("tabla")
)
)
)
# Definir o servidor
server <- function(input, output) {
# Filtrar os dados com base nos filtros selecionados
datos_filtrados <- reactive({
data_mod %>%
filter(
Categorías == input$categoria,
País == input$pais,
Año >= input$ano[1] & Año <= input$ano[2],
Citas >= input$citas[1] & Citas <= input$citas[2],
`Co-Citas` >= input$co_citas[1] & `Co-Citas` <= input$co_citas[2]
)
})
# Renderizar a tabela interativa
output$tabla <- renderDataTable({
datos_filtrados()
})
}
# Executar o aplicativo Shiny
shinyApp(ui = ui, server = server)
# Carregar os pacotes necessários
library(shiny)
library(DT) # Para tabelas interativas
library(dplyr)
# Preparar os dados (use seu código para data_mod aqui)
data_mod <- data %>%
select(SR, LCS, TC, AU, TI, CT, PY, AU1_CO) %>%
rename(
Referencia = SR,
`Co-Citas` = LCS,
Citas = TC,
Autor = AU,
Título = TI,
Categorías = CT,
Año = PY,
País = AU1_CO
)
# Definir a interface do usuário
ui <- fluidPage(
titlePanel("Visualización de Datos - Material Suplementario"),
sidebarLayout(
sidebarPanel(
h3("Filtros"),
textInput("busca_geral", "Buscar un término general:", value = ""),
selectInput("categoria", "Seleccionar Categoría:",
choices = unique(data_mod$Categorías),
selected = unique(data_mod$Categorías)[1]),
selectInput("pais", "Seleccionar País:",
choices = unique(data_mod$País),
selected = unique(data_mod$País)[1]),
sliderInput("ano", "Seleccionar intervalo de años:",
min = min(data_mod$Año, na.rm = TRUE),
max = max(data_mod$Año, na.rm = TRUE),
value = c(min(data_mod$Año, na.rm = TRUE), max(data_mod$Año, na.rm = TRUE))),
sliderInput("citas", "Seleccionar intervalo de Citas:",
min = min(data_mod$Citas, na.rm = TRUE),
max = max(data_mod$Citas, na.rm = TRUE),
value = c(min(data_mod$Citas, na.rm = TRUE), max(data_mod$Citas, na.rm = TRUE))),
sliderInput("co_citas", "Seleccionar intervalo de Co-Citas:",
min = min(data_mod$`Co-Citas`, na.rm = TRUE),
max = max(data_mod$`Co-Citas`, na.rm = TRUE),
value = c(min(data_mod$`Co-Citas`, na.rm = TRUE), max(data_mod$`Co-Citas`, na.rm = TRUE)))
),
mainPanel(
h3("Tabla Interactiva"),
dataTableOutput("tabla")
)
)
)
# Definir o servidor
server <- function(input, output) {
# Filtrar os dados com base nos filtros selecionados e na busca geral
datos_filtrados <- reactive({
dados <- data_mod %>%
filter(
Categorías == input$categoria,
País == input$pais,
Año >= input$ano[1] & Año <= input$ano[2],
Citas >= input$citas[1] & Citas <= input$citas[2],
`Co-Citas` >= input$co_citas[1] & `Co-Citas` <= input$co_citas[2]
)
# Aplicar busca geral, se houver um termo digitado
if (input$busca_geral != "") {
dados <- dados %>%
filter(
grepl(input$busca_geral, Referencia, ignore.case = TRUE) |
grepl(input$busca_geral, Autor, ignore.case = TRUE) |
grepl(input$busca_geral, Título, ignore.case = TRUE) |
grepl(input$busca_geral, Categorías, ignore.case = TRUE) |
grepl(input$busca_geral, País, ignore.case = TRUE)
)
}
dados
})
# Renderizar a tabela interativa
output$tabla <- renderDataTable({
datos_filtrados()
})
}
# Executar o aplicativo Shiny
shinyApp(ui = ui, server = server)
# Executar o aplicativo Shiny
shinyApp(ui = ui, server = server)
source("C:/Users/ander/OneDrive/R/SR_ReproductiveJustice/06_Results_TablaS1.R", echo=TRUE)
# Carregar os pacotes necessários
library(shiny)
library(DT) # Para tabelas interativas
library(dplyr)
# Preparar os dados (use seu código para data_mod aqui)
data_mod <- data %>%
select(SR, DI, LCS, TC, AU, TI, CT, PY, AU1_CO) %>%
rename(
Referencia = SR,
DOI = DI,
`Co-Citas` = LCS,
Citas = TC,
Autor = AU,
Título = TI,
Categorías = CT,
Año = PY,
País = AU1_CO
)
# Definir a interface do usuário
ui <- fluidPage(
titlePanel("Visualización de Datos - Material Suplementario"),
sidebarLayout(
sidebarPanel(
h3("Filtros"),
textInput("busca_geral", "Buscar un término general:", value = ""),
selectInput("categoria", "Seleccionar Categoría:",
choices = unique(data_mod$Categorías),
selected = unique(data_mod$Categorías)[1]),
selectInput("pais", "Seleccionar País:",
choices = unique(data_mod$País),
selected = unique(data_mod$País)[1]),
sliderInput("ano", "Seleccionar intervalo de años:",
min = min(data_mod$Año, na.rm = TRUE),
max = max(data_mod$Año, na.rm = TRUE),
value = c(min(data_mod$Año, na.rm = TRUE), max(data_mod$Año, na.rm = TRUE))),
sliderInput("citas", "Seleccionar intervalo de Citas:",
min = min(data_mod$Citas, na.rm = TRUE),
max = max(data_mod$Citas, na.rm = TRUE),
value = c(min(data_mod$Citas, na.rm = TRUE), max(data_mod$Citas, na.rm = TRUE))),
sliderInput("co_citas", "Seleccionar intervalo de Co-Citas:",
min = min(data_mod$`Co-Citas`, na.rm = TRUE),
max = max(data_mod$`Co-Citas`, na.rm = TRUE),
value = c(min(data_mod$`Co-Citas`, na.rm = TRUE), max(data_mod$`Co-Citas`, na.rm = TRUE)))
),
mainPanel(
h3("Tabla Interactiva"),
dataTableOutput("tabla")
)
)
)
# Definir o servidor
server <- function(input, output) {
# Filtrar os dados com base nos filtros selecionados e na busca geral
datos_filtrados <- reactive({
dados <- data_mod %>%
filter(
Categorías == input$categoria,
País == input$pais,
Año >= input$ano[1] & Año <= input$ano[2],
Citas >= input$citas[1] & Citas <= input$citas[2],
`Co-Citas` >= input$co_citas[1] & `Co-Citas` <= input$co_citas[2]
)
# Aplicar busca geral, se houver um termo digitado
if (input$busca_geral != "") {
dados <- dados %>%
filter(
grepl(input$busca_geral, Referencia, ignore.case = TRUE) |
grepl(input$busca_geral, Autor, ignore.case = TRUE) |
grepl(input$busca_geral, Título, ignore.case = TRUE) |
grepl(input$busca_geral, Categorías, ignore.case = TRUE) |
grepl(input$busca_geral, País, ignore.case = TRUE)
)
}
dados
})
# Renderizar a tabela interativa
output$tabla <- renderDataTable({
datos_filtrados()
})
}
# Executar o aplicativo Shiny
shinyApp(ui = ui, server = server)
# Carregar os pacotes necessários
library(shiny)
library(DT) # Para tabelas interativas
library(dplyr)
# Preparar os dados (use seu código para data_mod aqui)
data_mod <- data %>%
select(SR, LCS, TC, AU, TI, CT, PY, AU1_CO) %>%
rename(
Referencia = SR,
`Co-Citas` = LCS,
Citas = TC,
Autor = AU,
Título = TI,
Categorías = CT,
Año = PY,
País = AU1_CO
)
# Adicionar as opções "Todas" nas categorias e países
data_mod <- data_mod %>%
mutate(
Categorías = replace_na(Categorías, "Sin Categoría"),
País = replace_na(País, "Sin País")
)
# Definir a interface do usuário
ui <- fluidPage(
titlePanel("Visualización de Datos - Material Suplementario"),
sidebarLayout(
sidebarPanel(
h3("Filtros"),
textInput("busca_geral", "Buscar un término general:", value = ""),
selectInput("categoria", "Seleccionar Categoría:",
choices = c("Todas", unique(data_mod$Categorías)),
selected = "Todas"),
selectInput("pais", "Seleccionar País:",
choices = c("Todas", unique(data_mod$País)),
selected = "Todas"),
sliderInput("ano", "Seleccionar intervalo de años:",
min = min(data_mod$Año, na.rm = TRUE),
max = max(data_mod$Año, na.rm = TRUE),
value = c(min(data_mod$Año, na.rm = TRUE), max(data_mod$Año, na.rm = TRUE))),
sliderInput("citas", "Seleccionar intervalo de Citas:",
min = min(data_mod$Citas, na.rm = TRUE),
max = max(data_mod$Citas, na.rm = TRUE),
value = c(min(data_mod$Citas, na.rm = TRUE), max(data_mod$Citas, na.rm = TRUE))),
sliderInput("co_citas", "Seleccionar intervalo de Co-Citas:",
min = min(data_mod$`Co-Citas`, na.rm = TRUE),
max = max(data_mod$`Co-Citas`, na.rm = TRUE),
value = c(min(data_mod$`Co-Citas`, na.rm = TRUE), max(data_mod$`Co-Citas`, na.rm = TRUE)))
),
mainPanel(
h3("Tabla Interactiva"),
dataTableOutput("tabla")
)
)
)
# Definir o servidor
server <- function(input, output) {
# Filtrar os dados com base nos filtros selecionados e na busca geral
datos_filtrados <- reactive({
dados <- data_mod %>%
filter(
(Categorías == input$categoria | input$categoria == "Todas"),
(País == input$pais | input$pais == "Todas"),
Año >= input$ano[1] & Año <= input$ano[2],
Citas >= input$citas[1] & Citas <= input$citas[2],
`Co-Citas` >= input$co_citas[1] & `Co-Citas` <= input$co_citas[2]
)
# Aplicar busca geral, se houver um termo digitado
if (input$busca_geral != "") {
dados <- dados %>%
filter(
grepl(input$busca_geral, Referencia, ignore.case = TRUE) |
grepl(input$busca_geral, Autor, ignore.case = TRUE) |
grepl(input$busca_geral, Título, ignore.case = TRUE) |
grepl(input$busca_geral, Categorías, ignore.case = TRUE) |
grepl(input$busca_geral, País, ignore.case = TRUE)
)
}
dados
})
# Renderizar a tabela interativa
output$tabla <- renderDataTable({
datos_filtrados()
})
}
# Executar o aplicativo Shiny
shinyApp(ui = ui, server = server)
# Carregar os pacotes necessários
library(shiny)
library(DT) # Para tabelas interativas
library(dplyr)
# Preparar os dados (use seu código para data_mod aqui)
data_mod <- data %>%
select(SR, DI, LCS, TC, AU, TI, CT, PY, AU1_CO) %>%
rename(
Referencia = SR,
DOI = DI,
`Co-Citas` = LCS,
Citas = TC,
Autor = AU,
Título = TI,
Categorías = CT,
Año = PY,
País = AU1_CO
)
# Adicionar as opções "Todas" nas categorias e países
data_mod <- data_mod %>%
mutate(
Categorías = replace_na(Categorías, "Sin Categoría"),
País = replace_na(País, "Sin País")
)
# Definir a interface do usuário
ui <- fluidPage(
titlePanel("Visualización de Datos - Material Suplementario"),
sidebarLayout(
sidebarPanel(
h3("Filtros"),
textInput("busca_geral", "Buscar un término general:", value = ""),
selectInput("categoria", "Seleccionar Categoría:",
choices = c("Todas", unique(data_mod$Categorías)),
selected = "Todas"),
selectInput("pais", "Seleccionar País:",
choices = c("Todas", unique(data_mod$País)),
selected = "Todas"),
sliderInput("ano", "Seleccionar intervalo de años:",
min = min(data_mod$Año, na.rm = TRUE),
max = max(data_mod$Año, na.rm = TRUE),
value = c(min(data_mod$Año, na.rm = TRUE), max(data_mod$Año, na.rm = TRUE))),
sliderInput("citas", "Seleccionar intervalo de Citas:",
min = min(data_mod$Citas, na.rm = TRUE),
max = max(data_mod$Citas, na.rm = TRUE),
value = c(min(data_mod$Citas, na.rm = TRUE), max(data_mod$Citas, na.rm = TRUE))),
sliderInput("co_citas", "Seleccionar intervalo de Co-Citas:",
min = min(data_mod$`Co-Citas`, na.rm = TRUE),
max = max(data_mod$`Co-Citas`, na.rm = TRUE),
value = c(min(data_mod$`Co-Citas`, na.rm = TRUE), max(data_mod$`Co-Citas`, na.rm = TRUE)))
),
mainPanel(
h3("Tabla Interactiva"),
dataTableOutput("tabla")
)
)
)
# Definir o servidor
server <- function(input, output) {
# Filtrar os dados com base nos filtros selecionados e na busca geral
datos_filtrados <- reactive({
dados <- data_mod %>%
filter(
(Categorías == input$categoria | input$categoria == "Todas"),
(País == input$pais | input$pais == "Todas"),
Año >= input$ano[1] & Año <= input$ano[2],
Citas >= input$citas[1] & Citas <= input$citas[2],
`Co-Citas` >= input$co_citas[1] & `Co-Citas` <= input$co_citas[2]
)
# Aplicar busca geral, se houver um termo digitado
if (input$busca_geral != "") {
dados <- dados %>%
filter(
grepl(input$busca_geral, Referencia, ignore.case = TRUE) |
grepl(input$busca_geral, Autor, ignore.case = TRUE) |
grepl(input$busca_geral, Título, ignore.case = TRUE) |
grepl(input$busca_geral, Categorías, ignore.case = TRUE) |
grepl(input$busca_geral, País, ignore.case = TRUE)
)
}
dados
})
# Renderizar a tabela interativa
output$tabla <- renderDataTable({
datos_filtrados()
})
}
# Executar o aplicativo Shiny
shinyApp(ui = ui, server = server)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='scoping-review-justicia-reprodutiva',
token='9A83326CDF9244501C5BAE2B71B12A7F',
secret='R+XptF/4iBRSmGfCOVsNlX/6gUkb1k1MzHmVEvDD')
require(rsconnect)
rsconnect::deployApp('script/07_Shinnyapp.R')
rsconnect::deployApp('/script/07_Shinnyapp.R')
rsconnect::deployApp('/script/07_Shinnyapp.R')
rsconnect::deployApp('/shinny/07_Shinnyapp.R')
rsconnect::deployApp('/shinny/app.R')
rsconnect::deployApp('shinny/app.R')
dir()
dir("shinny")
runApp('shinny/app.R')
rsconnect::deployApp("shinny/app.R")
rsconnect::deployApp("shinny")
data <- readRDS("data_results.rds")
require(rsconnect)
rsconnect::deployApp("shinny")
rsconnect::showLogs()
rlang::last_trace()
shiny::runApp("shinny")
rm(data, data_mod)
shiny::runApp("shinny")
rsconnect::deployApp("shinny")
rsconnect::showLogs()
rsconnect::showLogs("https://scoping-review-justicia-reprodutiva.shinyapps.io/shinny")
rsconnect::appDependencies("shinny")
rsconnect::showLogs("shinny")
rsconnect::deployApp("shinny")
library(tidyr)
rsconnect::deployApp("shinny")
install.packages("tidyr")
rsconnect::deployApp("shinny")
source("C:/Users/ander/OneDrive/R/SR_ReproductiveJustice/script/06_Results_Tempo.R", echo=TRUE)
